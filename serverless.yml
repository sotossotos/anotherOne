service: anotherOne

frameworkVersion: '2'
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  profile: serverlessUser
  region: eu-west-1
  environment:
        tableName: ${self:custom.tableName}
        bucketName: ${self:custom.bucketName}
        customerCreatedSNS: customerCreatedT
          
  iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
              - s3:*
              - sns:*
          Resource: '*'
plugins:
    - serverless-webpack
    - serverless-s3-local
    - serverless-dynamodb-local
    - serverless-plugin-scripts
    - serverless-plugin-offline-dynamodb-stream
    - serverless-offline-sns
    ##- serverless-offline-kinesis
    - serverless-offline
package:
    individually: true
custom:
  ## This is for the undefined property error (allowCache or useChildProcess)
    serverless-offline: 
      allowCache: true
      ##useChildProcesses: true
    serverless-offline-sns:
      port: 4002 
      debug: true
    tableName: customer-table
    bucketName: local-bucket-upload
    dynamodbStream:
      host: localhost
      port: 8000
      region: eu-west-1
      pollForever: true
      streams:
        - table: ${self:custom.tableName}
          functions:
            - triggerStream
    serverless-offline-dynamodb-streams:
      region: eu-west-1
      accessKeyId: root
      secretAccessKey: root
      skipCacheInvalidation: false
      readInterval: 500
    dynamodb:
        stages:
            - dev
        start:
            port: 8000
            inMemory: true
            migrate: true
        migration:
            dir: tables
    scripts:
        hooks: 
            'aws:common:validate:validate': tableName=customer-table npm run test
    webpack:
      webpackConfig: 'webpack.config.js' # Name of webpack configuration file
      includeModules: false # Node modules configuration for packaging
      packager: 'npm' # Packager that will be used to package your external modules
      excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
    s3:
      host: localhost
      port: 7000
      directory: ./s3-local
functions:
  up:
    handler: src/handlers/up.handler
    events:
      - http:
          method: GET
          path: /live
          cors: true
  delete:
    handler: src/handlers/deleteCustomer.handler
    events:
      - http:
          method: DELETE
          path: /customer/{ID}
          cors: true
  greet:
    handler: src/handlers/greet.handler
    events:
      - http:
          method: GET
          path: /greet/{NAME}
          cors: true
  check:
    handler: src/handlers/checkAge.handler
    events:
      - http:
          method: POST
          path: /age-restriction/{AGE}
          cors: true
  createCustomer:
    handler: src/handlers/createCustomer.handler
    events:
      - http:
          method: POST
          path: /customer/{ID}
          cors: true  
  createImageFile:
    handler: src/handlers/createImageFile.handler
    events:
      - http:
          method: POST
          path: /customer/file-image/{fName}
          cors: true

  createStrictCustomer:
    handler: src/handlers/createStrictCustomer.handler
    events:
      - http:
          method: POST
          path: /strict-customer/{ID}
          cors: true  
  getCustomer:
    handler: src/handlers/getCustomer.handler
    events:
      - http:
          method: GET
          path: /customer/{ID}
          cors: true  
  createFile:
    handler: src/handlers/createFile.handler
    events:
      - http:
          method: POST
          path: file/{fName}
          cors: true
  getFile:
    handler: src/handlers/getFile.handler
    events:
      - http:
          method: GET  
          path: file/{fName}
          cors: true  
  triggerStream:
    handler: src/handlers/triggerStream.handler
    events:
      - stream:
        type: dynamodb
        batchSize: 1
        startingPosition: LATEST
        arn:
          Fn::GetAtt:
            - ImagesTable
            - StreamArn
  snsSubCustomerCreated:
    handler: src/handlers/snsSubCustomerCreated.handler
    events:
      - sns: customerCreatedT
  
resources:
    Resources:
        DemoBucketUpload:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: ${self:custom.bucketName}
        # customerCreatedTopic:
        #   Type: AWS::SNS:Topic
        #   Properties:
        #     DisplayName: customerCreatedT
        #     TopicName: customerCreatedT
        MyDynamoDbTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                StreamSpecification:
                  StreamViewType: NEW_IMAGE
                AttributeDefinitions:
                    - AttributeName: ID
                      AttributeType: S
                KeySchema:
                    - AttributeName: ID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
