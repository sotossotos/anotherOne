service: anotherOne

frameworkVersion: '2'
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  profile: serverlessUser
  region: eu-west-2
  environment:
        tableName: ${self:custom.tableName}
  iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
          Resource: '*'
plugins:
    - serverless-webpack
    - serverless-offline
    - serverless-dynamodb-local
    - serverless-plugin-scripts
package:
    individually: true
custom:
    tableName: customer-table
    dynamodb:
        stages:
            - dev
        start:
            port: 8000
            inMemory: true
            migrate: true
        migration:
            dir: tables
    webpack:
      webpackConfig: 'webpack.config.js' # Name of webpack configuration file
      includeModules: false # Node modules configuration for packaging
      packager: 'npm' # Packager that will be used to package your external modules
      excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
functions:
  up:
    handler: src/handlers/up.handler
    events:
      - http:
          method: GET
          path: /live
          cors: true
  greet:
    handler: src/handlers/greet.handler
    events:
      - http:
          method: GET
          path: /greet/{NAME}
          cors: true
  check:
    handler: src/handlers/checkAge.handler
    events:
      - http:
          method: POST
          path: /age-restriction/{AGE}
          cors: true
  createCustomer:
    handler: src/handlers/createCustomer.handler
    events:
      - http:
          method: POST
          path: /customer/{ID}
          cors: true  
  createStrictCustomer:
    handler: src/handlers/createStrictCustomer.handler
    events:
      - http:
          method: POST
          path: /strict-customer/{ID}
          cors: true  
  getCustomer:
    handler: src/handlers/getCustomer.handler
    events:
      - http:
          method: GET
          path: /customer/{ID}
          cors: true  
resources:
    Resources:
        MyDynamoDbTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: ID
                      AttributeType: S
                KeySchema:
                    - AttributeName: ID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
